{"version":3,"file":"speech-output.webchat-plugin.legacy.js","mappings":";;;wBAAA,IAAKA,OAAOC,kBACR,MAAM,IAAIC,MAAM,sEAEpBC,EAAOC,QAAUJ,OAAOC,kBAAkBI,QCFtCC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,mxBChBf,IAkBsCQ,EClBhCC,EAAsB,IAAIC,IAK1BC,EAAe,SAACC,GAClB,GAAIH,EAAoBI,IAAID,EAAME,QAAQC,SACtC,OAAO,KAMX,GAHAN,EAAoBO,IAAIJ,EAAME,QAAQC,UAGjCE,gBACD,OAAO,KAGX,IAAKL,EAAMM,OAAOC,SAASC,UACvB,OAAO,KAGX,IAAMC,EAAOT,EAAME,QAAQO,KAErBC,EAAY,IAAIC,yBAItB,OAHAD,EAAUD,KAAOA,EACjBJ,gBAAgBO,MAAMF,GAEf,MDT2Bd,ECejB,CACjBiB,MA/B0B,SAAC,GAAD,IAAGJ,EAAH,EAAGA,KAAMK,EAAT,EAASA,OAAT,MAAiC,QAAXA,GAA+B,eAAXA,KAA6BL,GAgCjGM,UAJyB1B,EAAAA,KAAWU,GAKpCiB,QAAS,CACLC,aAAa,EACbC,WAAW,IDnBXlC,SAEAA,OAAOmC,6BAAP,YAA2CnC,OAAOmC,8BAAgC,IAAlF,CAAuFvB,IACvFwB,QAAQC,IAAI,kC","sources":["webpack://@cognigy/webchat/./alias/react.js","webpack://@cognigy/webchat/webpack/bootstrap","webpack://@cognigy/webchat/./src/plugins/helper.tsx","webpack://@cognigy/webchat/./src/plugins/speech-output/index.tsx"],"sourcesContent":["if (!window.__COGNIGY_WEBCHAT)\n    throw new Error('Cognigy Webchat v2.7 or higher has to be loaded before this plugin');\n\nmodule.exports = window.__COGNIGY_WEBCHAT.React;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { MessagePlugin, MessageComponent, MessagePluginOptions, MessageMatcher, MessagePluginFactory, MessagePluginFactoryProps } from \"../common/interfaces/message-plugin\";\nimport { InputPlugin, InputPluginFactory } from \"../common/interfaces/input-plugin\";\nimport { IMessage } from \"../common/interfaces/message\";\nimport { IWebchatConfig } from \"../common/interfaces/webchat-config\";\n\nconst createStringMatcher = (name: string): MessageMatcher => message => message.data\n    && message.data._plugin\n    && message.data._plugin.type === name;\n\ntype MessagePluginCreator = (match: MessageMatcher | string, component: MessageComponent, options?: Partial<MessagePluginOptions>) => MessagePlugin;\nexport const createMessagePlugin: MessagePluginCreator = (match, component, options = {}): MessagePlugin => {\n    if (typeof match === 'string')\n        match = createStringMatcher(match);\n\n    const plugin: MessagePlugin = {\n        match,\n        component,\n        options\n    }\n\n    return plugin;\n};\n\nexport const registerMessagePlugin = (plugin: MessagePlugin | MessagePluginFactory) => {\n    if (window) {\n        // @ts-ignore\n        window.cognigyWebchatMessagePlugins = [...(window.cognigyWebchatMessagePlugins || []), plugin];\n        console.log('added cognigy message plugin');\n    }\n}\n\nexport const getRegisteredMessagePlugins = (): (MessagePlugin | MessagePluginFactory)[] => \n    // @ts-ignore\n    window.cognigyWebchatMessagePlugins || [];\n\nexport const prepareMessagePlugins = (messagePlugins = getRegisteredMessagePlugins(), {\n    React,\n    styled\n}): MessagePlugin[] => messagePlugins\n    .map(plugin => typeof plugin === 'function'\n        ? plugin({ React, styled })\n        : plugin\n    )\n    .map(plugin => typeof plugin.match === 'string'\n        ? { ...plugin, match: ({ data }) => data && data._plugin && data._plugin.type === plugin.match }\n        : plugin\n    );\n\n\n\n\n// type InputPluginCreator = (match: InputRule | string, component: InputComponent, options?: Partial<InputPluginOptions>) => InputPlugin;\n// export const createInputPlugin: InputPluginCreator = (match, component, options = {}) => {\n//     const plugin = {\n//         match,\n//         component,\n//         options\n//     }\n\n//     return plugin;\n// };\n\nexport const registerInputPlugin = (plugin: InputPlugin | InputPluginFactory) => {\n    if (window) {\n        // @ts-ignore\n        window.cognigyWebchatInputPlugins = [...(window.cognigyWebchatInputPlugins || []), plugin];\n        console.log('added cognigy input plugin');\n    }\n}\n\nexport const getPluginsForMessage = (plugins: MessagePlugin[], config: IWebchatConfig) => (message: IMessage): MessagePlugin[] => {\n    let matchedPlugins: MessagePlugin[] = [];\n    \n    for (const plugin of plugins) {\n        const isMatch = (plugin.match as MessageMatcher)(message, config);\n\n        if (isMatch) {\n            matchedPlugins.push(plugin);\n\n            if (!plugin.options || !plugin.options.passthrough)\n                break;\n        }\n    }\n\n    return matchedPlugins;\n}\n\nexport const isFullscreenPlugin = (plugin: MessagePlugin) => plugin.options && plugin.options.fullscreen;","import * as React from 'react';\n\nimport { MessageComponentProps, MessagePluginFactory, MessageMatcher } from '../../common/interfaces/message-plugin';\nimport { registerMessagePlugin } from '../helper';\n\nconst processedMessageIds = new Set<string>();\n\n// only read out incoming messages with text\nconst match: MessageMatcher = ({ text, source }) => source === 'bot' || source === 'engagement' && !!text;\n\nconst SpeechOutput = (props: MessageComponentProps) => {\n    if (processedMessageIds.has(props.message.traceId)) {\n        return null;\n    }\n\n    processedMessageIds.add(props.message.traceId);\n\n    // check whether text to speech is available in client\n    if (!speechSynthesis)\n        return null;\n\n    // check whether text to speech is enabled in endpoint\n    if (!props.config.settings.enableTTS)\n        return null;\n\n    // we already checked that text exists in the match function\n    const text = props.message.text as string;\n\n    const utterance = new SpeechSynthesisUtterance();\n    utterance.text = text;\n    speechSynthesis.speak(utterance);\n\n    return null;\n}\n\n// make sure to read out messages only once\nconst MemoizedSpeechOutput = React.memo(SpeechOutput);\n\nconst speechOutput = {\n    match,\n    component: MemoizedSpeechOutput,\n    options: {\n        passthrough: true,\n        fullwidth: true\n    }\n}\n\nregisterMessagePlugin(speechOutput);"],"names":["window","__COGNIGY_WEBCHAT","Error","module","exports","React","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","plugin","processedMessageIds","Set","SpeechOutput","props","has","message","traceId","add","speechSynthesis","config","settings","enableTTS","text","utterance","SpeechSynthesisUtterance","speak","match","source","component","options","passthrough","fullwidth","cognigyWebchatMessagePlugins","console","log"],"sourceRoot":""}